---
version: 2.1

orbs:
  python: twdps/python-api@dev:latest
  cosign: twdps/cosign@0.1.0

# ==== global pipeline parameters

globals:
  - &context twdps-core-labs-team
  - &shell-options op run --env-file op.env -- /bin/bash -eo pipefail
  - &package-manager pipenv
  - &registry ghcr.io/thoughtworks-dps

parameters:
  registry:
    description: publish to this registry
    type: string
    default: ghcr.io/thoughtworks-dps

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

jobs:

  test-builder:
    docker:
      - image: twdps/circleci-python-builder:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install requirements
          command: |
            pip install -r requirements-dev.txt
            pip install -r requirements.txt
      - run:
          name: Pylint api
          command: pylint api
      - run:
          name: hadolint
          command: docker run --rm -i hadolint/hadolint < Dockerfile
      - run:
          name: run test coverage analysis
          command: |
            echo "export API_VERSION=dev.${CIRCLE_SHA1:0:7}" >> $BASH_ENV
            source $BASH_ENV
            coverage run -m pytest -vv -l
            coverage xml --omit='test/*'

  # deploy-hello-restful:
  #   parameters:
  #     cluster:
  #       description: target cluster
  #       type: string
  #     namespace:
  #       description: deploy to this namespace
  #       type: string
  #     tag:
  #       description: image to deploy
  #       type: string
  #   docker:
  #     - image: twdps/circleci-kube-ops:stable
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: set environment
  #         command: |
  #           op inject -i op.env -o $BASH_ENV
  #           source $BASH_ENV
  #           mkdir -p ~/.kube
  #           ENV=<< parameters.cluster >> op inject -i tpl/kubeconfig.tpl -o ~/.kube/config
  #     - run:
  #         name: deploy hello-restful
  #         command: |
  #           helm upgrade hello-restful charts/hello-restful \
  #                --install \
  #                -n << parameters.namespace>> \
  #                --values charts/hello-restful/values.yaml
  #                --set image.tag=dev.${CIRCLE_SHA1:0:7}

#   tag-and-publish:
#     docker:
#       - image: twdps/circleci-python-builder:stable
#     environment:
#       - IMAGE_REPOSITORY: ghcr.io/thoughtworks-dps
#       - IMAGE_NAME: hello-restful
#     steps:
#       - setup_remote_docker
#       - checkout
#       - run:
#           name: publish tagged docker image to Github Packages
#           command: |
#             source op.env
#             export DOCKER_PASSWORD=$(op read $DOCKER_PASSWORD)
#             export DOCKER_LOGIN=$(op read $DOCKER_LOGIN)
#             echo $DOCKER_PASSWORD | docker login ghcr.io -u $DOCKER_LOGIN --password-stdin
#             docker pull $IMAGE_REPOSITORY/$IMAGE_NAME:dev.${CIRCLE_SHA1:0:7}
#             docker tag $IMAGE_REPOSITORY/$IMAGE_NAME:dev.${CIRCLE_SHA1:0:7} $IMAGE_REPOSITORY/$IMAGE_NAME:$CIRCLE_TAG
#             docker push $IMAGE_REPOSITORY/$IMAGE_NAME:$CIRCLE_TAG


workflows:
  version: 2

  development-build:
    jobs:
      - test-builder

      - python/build-image:
          name: secure-build
          context: *context
          shell: /bin/bash
          before-build:
            - run:
                name: inject environment variables
                command: |
                  op inject -i op.env -o $BASH_ENV
                  echo "export API_VERSION=dev.${CIRCLE_SHA1:0:7}" >> $BASH_ENV
                  source $BASH_ENV
                  op inject -i cosign.key.env -o cosign.key
                  op inject -i cosign.pub.env -o cosign.pub
          registry: *registry
          image: hello-restful
          # image-cve-scan: false
          # severity-threshold: medium
          # snyk-organization: twdps
          # health-url: "http://0.0.0.0:8000/v1/hello/healthz"
          # port-definition: "8000:8000"
          # docker-run-arguments: "-e API_VERSION=dev.${CIRCLE_SHA1:0:7}"
          after-push:
            - cosign/install
            - cosign/sign:
                registry: << pipeline.parameters.registry >>
                image: hello-restful
                tag: dev.${CIRCLE_SHA1:0:7}
          requires:
            - test-builder
          filters: *on-push-main


      # - python/static-analysis:
      #     name: static-code-analysis
      #     context: *context
      #     shell: *shell-options
      #     package-manager: pip
      #     install-dev: true
      #     lint-path: api
      #     report-coverage: codeclimate
      #     cis-docker-image-scan: true
      #     after-checkout:
      #       - run:
      #           name: set API_VERSION
      #           command: |
      #             echo "export API_VERSION=dev.${CIRCLE_SHA1:0:7}" >> $BASH_ENV
      #             source $BASH_ENV
      #     filters: *on-push-main

      # - python/secure-image-build:
      #     name: secure-build
      #     context: *context
      #     shell: /bin/bash
      #     before-build:
      #       - run:
      #           name: inject environment variables
      #           command: |
      #             op inject -i op.env -o $BASH_ENV
      #             echo "export API_VERSION=dev.${CIRCLE_SHA1:0:7}" >> $BASH_ENV
      #             source $BASH_ENV
      #             op inject -i cosign.key.env -o cosign.key
      #             op inject -i cosign.pub.env -o cosign.pub
      #     registry: *registry
      #     image: hello-restful
      #     image-cve-scan: true
      #     severity-threshold: medium
      #     snyk-organization: twdps
      #     health-url: "http://0.0.0.0:8000/v1/hello/healthz"
      #     port-definition: "8000:8000"
      #     docker-run-arguments: "-e API_VERSION=dev.${CIRCLE_SHA1:0:7}"
      #     after-push:
      #       - cosign/install
      #       - cosign/sign:
      #           registry: << pipeline.parameters.registry >>
      #           image: hello-restful
      #           tag: dev.${CIRCLE_SHA1:0:7}
      #     requires:
      #       - static-code-analysis
      #     filters: *on-push-main

      # - deploy-hello-restful:
      #     name: dev deployment
      #     cluster: prod-us-east-1
      #     namespace: demo-dev
      #     tag: dev.${CIRCLE_SHA1:0:7}
      #     context: *context
      #     requires:
      #       - secure-build
      #     filters: *on-push-main

  # publish-to-registry:
  #   jobs:
  #     - tag-and-publish:
  #         context: << pipeline.parameters.context >>
  #         filters: *on-tag-main
